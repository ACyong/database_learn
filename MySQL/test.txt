约束条件
    1、作用
        为了保证数据的完整性、一致性、有效性的规则
        可以限制无效的数据插入到数据表里面

    2、约束分类
        1、默认约束(default)
            1、作用 ：在插入记录时，如果不为该字段赋值，则使用默认值
            2、格式 ：字段名 数据类型 default 值
        2、非空约束(not null)
            1、作用 ：不允许将该字段的值有NULL记录
            2、格式 ：字段名 数据类型 not null


索引(index)
    1、定义：对数据库中表的一列或者多列的值进行排序的一种结构(MySQL中用二叉树Btree方式)

    2、优点：可以加快数据的检索速度

    3、缺点：
        1、当对表中的数据进行增加、删除和修改的时候，索引也要动态维护，降低了数据的维护速度
        2、索引需要占用物理空间

    4、索引类型
        1、普通索引(index)
            1、使用规则
                1、一个表中可以有多个index字段
                2、字段的值可以有重复，且可以为null值
                3、经常把做查询条件的字段设置为index字段
                4、index字段的key标志是MUL
            2、创建普通索引
                1、创建表时创建
                    语法：index(字段名1),index(字段名2)
                    create table t1(
                        id int,
                        name char(20),
                        age tinyint unsigned,
                        index(id),
                        index(name)
                    );
                2、在已有表中创建index
                    1、语法
                        create index 索引名 on 表名(字段名);
                    注意：
                        索引名一般和字段名一样
            3、查看普通索引
                1、desc 表名;  --> 查看key标志为MUL
                2、show index from 表名;
            4、删除索引
                drop index 索引名 on 表名;
                drop index id on t1;
                drop index name on t1;
                注意：删除普通索引只能一个一个删除

        2、唯一索引(unique key)
            1、使用规则
                1、一个表里面可以有个unique字段
                2、unique字段的值不允许重复，但可以为空
                3、unique的key标志是 UNI
            2、创建唯一索引
              1、创建表时创建
                  1、方式1
                      字段名 数据类型 unique,
                      create table t7(
                        id int unique,
                        name char(15)
                      );
                  2、方式2
                      unique(字段名),
                      unique(字段名)
                      create table t10(
                          id int,
                          name char(15),
                          unique(id),
                          unique(name)
                      );
              2、已有表中创建
                  create unique index 索引名 on 表名(字段名);
            3、删除唯一索引(unique)
                drop index 索引名 on 表名;
                注意：删除index、unique index只能一个一个删除

        3、主键索引（PRI）
            1、使用规则
                1、一个表中只能有一个主键（primary）字段
                2、对应字段的值不允许重复，且不能为空
                3、主键字段的key标志PRI
                4、把表中能够唯一标示一条记录的字段设置为主键，通常把表中记录表号的字段设置为主键
            2、创建主键（primary key）
                1、创建表时创建主键
                    1、字段名 数据类型 primary key,
                    2、primary key(字段名)
                2、在已有表中创建
                    alter table 表名 add primary key(字段名);
            3、删除
                alter table 表名 drop primary key;
            4、自增长属性(auto_increment)
                1、作用：通常和主键字段一起配合使用
                2、创建：
                    1、创建表时创建
                        字段名 数据类型 primary key auto_increment,

                    2、在已有表中添加自增长属性
                        alter table 表名 modeify 字段名 数据类型
                        primary key auto_increment;
            5、删除主键及
                1、alter table 表名 modify 字段名 数据类型;  # 先删除自增长
                2、alter table 表名 drop primary key;  # 再删主键

        4、外键索引（foreign key）
            1、定义：让当前表的字段值在另一个表的范围内选择
            2、语法格式：
                foreign key(参考字段名)
                references 被参考表名(被参考字段名)
                on delete 级联动做
                on update 级联动做
            3、案例
                表1:缴费信息表(财务)
                学号    姓名         班级        缴费金额
                1      唐伯虎       AID1712       28000
                2       秋香        AID1712       20000

                表2:学生信息表(班主任)
                学号      姓名       缴费金额
                1       唐伯虎       28000

            4、删除外键
                1、语法格式：
                    alter table 表名 drop foreign key 外键名;
                2、注意：
                    1、外键的查看方式
                        show create table 表名;
            5、在已有表中添加外键
                1、语法格式
                    alter table 表名 add;
                    foreign key(参考字段名) references
                    被参考表名(被参考字段名)
                    on delete 级联动做
                    on update 级联动做
                2、注意：在已有表中添加外键时，会收到表中原有数据的限制
            6、级联动做
                1、cascade： 数据级联更新
                    1、当主表删除记录时，如果从表有相关记录则级联删除
                    2、当主表更新被参考字段的值时，从表级联更新参考字段值
                2、restrict(默认)
                    1、当主表删除记录时，如果从表有相关记录则不允许主表删除
                    2、update同1
                3、set null
                    1、当主表删除记录时，从表中相关记录外键字段变为null
                    2、update同1
                4、no action
                    同restrict，都是立即检查外键限制
            7、使用规则
                1、两张表被参考字段和参考字段的数据类型要一致
                2、被参考字段必须是key的一种，通常是primary key


数据导入
    1、作用：将文件系统的内容导入到数据库中

    2、语法格式：
        load data infile "文件名"
        into table 表名
        fields terminated by "分隔符"
        lines terminated by "分隔符"

    3、把/etc/passwd 导入mysql数据库中

    4、操作步骤
        1、在数据库中创建对应表
        2、查看数据库的默认搜索路径
            show variables like "secure_file_priv";
        3、将系统文件拷贝到数据库的默认搜索路径中
            sudo cp /etc/passwd /var/lib/mysql-files;
        4、load data infile "/var/lib/mysql-files/passwd"
            into table userinfo
            fields terminated by ":分隔符"
            lines terminated by "\n分隔符";


数据导出
    1、作用：将数据库中表的记录保存到系统文件里

    2、语法格式
        select .... from 表名
        into outfile "文件名"
        fields terminated by "分隔符"
        lines terminated by "分隔符";

    3、注意
        1、导出的内容由SQL查询语句决定
        2、执行导出命令时路径必须指定在对应的数据库目录下
        3、show variable like 'secure_file_priv';


表的复制
    1、表的复制
        1、语法格式
            create table 表名 select 查询命令;

    2、只复制表结构
        1、语句格式
            create table 表名 select * where false;

    3、注意
        1、复制表的时候不会把原有表的 键 属性复制过来


其他查询：
    1、嵌套查询
        1、定义：把内层的查询结果作为外层的查询条件
        语法：select 查询语句 where 条件 （select 查询）

    2、多表查询
        1、两种方式
            1、select 字段名列表 from 表名列表;
            2、select 字段名列表 from 表名列表 where 条件;

    3、连接查询
        1、内连接
            1、定义：从表中显示与其他被连接表中没有匹配到的行
            2、语法格式：select 字段名列表 from 表1
                        inner join 表2 on 条件;
        2、外连接
            1、左连接：以左表为主显示查询结果
                语法：select 字段名列表 from 表1 left join 表2 on 条件;
            2、右连接：以右表为主显示查询结果
                语法：select 字段名列表 from 表1 right join 表2 on 条件;


ER模型&ER图
    1、定义：ER模型即实体-关系模型,ER图即实体-关系图

    2、三个概念
        1、实体
            1、定义：现实世界中任何可以被认知、区分的事物
            2、示例
                1、学校 ：学生、教师、课程、班主任 ...
                2、企业 ：职工、产品
        2、属性
            1、定义 ：实体所具有的特性
            2、示例
                1、学生属性：学号、姓名、年龄、性别、专业 ...
                2、产品属性：产品编号、产品名称、规格 ...
        3、关系
            1、定义 ：实体之间的关系
            2、分类
                一对一关系(1:1) 班级和班长
                一对多关系(1:n) 公司和职工、班级和学生
                多对多关系(m:n) 学生和课程、商店和顾客

    3、ER图的绘制
        1、矩形框代表实体,菱形框代表关系,椭圆形代表属性
        2、示例
            学生选课系统


事务&事务回滚
    1、事务定义
        一件事从开始发生到结束的整个过程

    2、属性
        1、原子性：一个事务是不可分割的工作单位,事务中的各个操作要么都做,要么就都不做
        2、一致性：事务必须从一个一致性状态到另一个一致性状态
        3、隔离性：一个事务的执行不能被其他并发事务干扰
        4、持久性：一个事务一旦提交,它对数据库的改变是永久性的

    3、事务及事务回滚的应用
        1、mysql中默认sql语句会自动commit到数据库
            show variables like "autocommit";
        2、事务应用
            1、开启事务
                mysql> start transaction;
                ## 此时autocommit被禁用,SQL命令不会对数据库中数据做修改
            2、终止事务
                mysql> commit; | rollback;
        3、注意
            事务&事务回滚只针对对表记录的操作:增加、删除、修改,对创建库、创建表是无效的
        4、案例
            1、背景
                你 ：   建行卡
                你朋友：工商卡
                你在建行的自动提款机给你朋友(工商银行卡)转账
            2、过程
                表1、建行：CCB
                表2、工行：ICBC
                    create table CCB(
                        name varchar(20),
                        money int
                    )default charset = utf8;

                    insert into CCB values("转钱", 100000);

                    create table ICBC(
                        name varchar(20),
                        money int
                    )default charset = utf8;

                    insert into ICBC values("借钱", 2000);

              ###开始转账
                  start transaction;
                  update CCB set money=95000 where name="你";
                  update ICBC set ... 断电了...;
                  rollback

              ###验证
                  select * from CCB;


Python数据库编程
    1、python数据库接口(Python DB-API)
        1、定义：为开发人员提供的数据库应用编程接口
        2、支持的数据库服务软件
            MySQL、Oracle、SQL_Server、Sybase、Mogodb ...
        3、Python提供的操作MySQL的模块
            模块名：pymysql
        4、pymysql的使用流程
            1、建立数据库连接
            2、创建游标对象
            3、使用游标对象的方法和SQL语句操控MySQL数据库
            4、提交commit
            5、关闭游标
            6、关闭数据库连接
        5、建立数据库连接
            1、语法格式
                对象名(db) = pymysql.connect("主机地址","用户名","密码","库名",charset="utf8")
            2、connect对象(db)的方法
                1、cursor() 创建一个游标对象db.cursor()
                2、commit() 提交到数据库 db.commit()
                3、rollback() 回滚 db.rollback()
                4、close() 关闭与数据库的连接 db.close()
            3、cursor游标对象(cur)的方法
                1、execute() 执行sql命令
                2、fetchone() 取得结果集的第一条记录
                3、fetchmany(数字) 取得结果集的 几条 记录
                4、fetchall() 取得结果集的所有行
                5、close() 关闭游标对象
                属性：rowcount : 返回命令执行所影响的条数

        pymysql.connect --->>db ---> db.cursor() ----> 执行


5、Mysql安装：
    1、Ubuntu 安装MySQL 服务
        1、安装服务端
            sudo apt-get install mysql-server
        2、安装客户端
            sudo apt-get install mysql-client

    2、Windows 安装MySQL 服务
        1、下载MySQL安装包（Windows）
            mysql-install-**5.7.msi
        2、双击、安装
        3、服务的启动和停止
            net stop mysql
            net start mysql

    3、启动和连接Mysql 服务
        1、服务端启动（Linux）
            1、查看MySQL 服务状态
                sudo /etc/init.d/mysql status
            2、启动MySQL 服务
                sudo /etc/init.d/mysql start
            3、停止MySQL 服务
                sudo /etc/init.d/mysql stop
            4、重启MySQL 服务
                sudo /etc/init.d/mysql restart
        2、客户端连接
            mysql -h主机名 -u用户名 -p密码 (本地连接可省略-h)
        3、断开于服务器的连接
            exit    quit    \q

    4、简单配置
        1、如何更改默认字符集
            1、方法：通过更改Mysql的配置文件实现
            2、步骤：
                1、获取root权限 sudo -i
                2、修改mysql配置文件：vi /etc/mysql/mysql.conf.d/mysqld.cnf
                                    在[mysqld] 中加入character_set_server = utf8
                3、重启mysql服务
                    sudo /etc/init.d/mysql restart
        2、取消本地监听
            1、方法：通过更改Mysql的配置文件实现
            2、步骤：
                1、获取root权限 sudo -i
                2、修改mysql配置文件：vi /etc/mysql/mysql.conf.d/mysqld.cnf
                                    找到bind-address = 127.0.0.1 并注释掉
                3、重启mysql服务
                    sudo /etc/init.d/mysql restart

        3、修改MySql 的管理员密码
            sudo mysqladmin -u root password newpassword

    5、卸载MySQL
        sudo apt purge mysql-*
        sudo rm -rf /etc/mysql/ /var/lib/mysql
        sudo apt autoremove
        sudo apt autoreclean

    6、SQL命令的使用规则
        1、每条命令必须以；结尾
        2、SQL命令不区分大小写
        3、\c终止SQL语句的运行


是否使用外键确实会有一些争议。我来解释下关于外键的使用：
首先，外键本身是为了实现强一致性，所以如果需要正确性>性能的话，还是建议使用外键，它可以让我们在数据库的层面保证数据的完整性和一致性。
当然不用外键，你也可以在业务层进行实现。不过，这样做也同样存在一定的风险，因为这样，就会让业务逻辑会与数据具备一定的耦合性。也就是业务逻辑和数据必须同时修改。而且在工作中，业务层可能会经常发生变化。

当然，很多互联网的公司，尤其是超大型的数据应用场景，大量的插入，更新和删除在外键的约束下会降低性能，同时数据库在水平拆分和分库的情况下，数据库端也做不到执行外键约束。另外，在高并发的情况下，外键的存在也会造成额外的开销。因为每次更新数据，都需要检查另外一张表的数据，也容易造成死锁。
所以在这种情况下，尤其是大型项目中后期，可以采用业务层来实现，取消外键提高效率。
不过在SQL学习之初，包括在系统最初设计的时候，还是建议你采用规范的数据库设计，也就是采用外键来对数据表进行约束。因为这样可以建立一个强一致性，可靠性高的数据库结构，也不需要在业务层来实现过多的检查。
当然在项目后期，业务量增大的情况下，你需要更多考虑到数据库性能问题，可以取消外键的约束，转移到业务层来实现。而且在大型互联网项目中，考虑到分库分表的情况，也会降低外键的使用。
不过在SQL学习，以及项目早期，还是建议你使用外键。在项目后期，你可以分析有哪些外键造成了过多的性能消耗。一般遵循2/8原则，会有20%的外键造成80%的资源效率，你可以只把这20%的外键进行开放，采用业务层逻辑来进行实现，当然你需要保证业务层的实现没有错误。不同阶段，考虑的问题不同。当用户和业务量增大的时候，对于大型互联网应用，也会通过减少外键的使用，来减低死锁发生的概率，提高并发处理能力。


关于COUNT()的效率是一个很好的问题，欢迎探讨：
在MySQL InnoDB存储引擎中，COUNT(*)和COUNT(1)都是对的所有结果进行的COUNT。如果有WHERE子句，则是对所有符合筛选条件的数据行进行统计。如果没有WHERE子句，则是对数据表的数据行数进行统计。
因此COUNT(*)和COUNT(1)本质上没有区别，执行的复杂度都是O(N)，也就是采用全表扫描，进行循环+计数的方式进行统计。
如果是MySQL MyISAM存储引擎，统计数据表的行数只需要O(1)复杂度，这是因为每张MyISAM的数据表都有一个meta信息有存储了row_count值。而一致性由表级锁来保证。而InnoDB支持事务，采用行级锁和MVCC机制，所以无法像MyISAM一样，只维护一个row_count变量。因此就需要采用扫描全表，进行循环+计数的方式来完成统计。
需要注意的是，在实际执行中COUNT(*)和COUNT(1)执行时间可能略有差别，不过你还是可以把这两个在执行效率上看成是相等的。

另外在InnoDB引擎中，如果是采用COUNT(*)和COUNT(1)来统计数据行数，要尽量采用二级索引。
因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引（非聚簇索引）。
对于查找具体的行来说，采用主键索引效率更高。而对于COUNT(*)和COUNT(1)这种，不需要查找具体的行，只是统计行数来说，系统会自动采用占用空间更小的二级索引来进行统计。
如果有多个二级索引的时候，会使用key_len小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。

优化总结：
1、一般情况下：COUNT(*) = COUNT(1) > COUNT(字段)
所以尽量使用COUNT(*)，当然如果你要统计的是就是某个字段的非空数据行数，那另当别论。毕竟执行效率比较的前提是要结果一样才行。
2、如果要统计COUNT(*)，尽量在数据表上建立二级索引，系统会自动采用key_len小的二级索引进行扫描，这样当我们使用SELECT COUNT(*)的时候效率就会提升，有时候提升几倍甚至更高都是有可能的。

